# Get interfaces first

- name: firewall / get network interface facts
  setup:
    gather_subset:
      - network

- name: firewall / find private_interface by IP address
  set_fact:
    private_interface: "{{ item }}"
  loop: "{{ ansible_interfaces }}"
  when: 
    - hostvars[inventory_hostname]['ansible_' + item] is defined
    - hostvars[inventory_hostname]['ansible_' + item].get('ipv4', {}).get('address') == private_ip

- name: firewall / fail if private_interface not found
  fail:
    msg: "No private_interface found {{ private_ip }}"
  when: private_interface is not defined

- name: firewall / find public_interface by IP address
  set_fact:
    public_interface: "{{ item }}"
  loop: "{{ ansible_interfaces }}"
  when: 
    - hostvars[inventory_hostname]['ansible_' + item] is defined
    - hostvars[inventory_hostname]['ansible_' + item].get('ipv4', {}).get('address') == ansible_host

- name: firewall / fail if public_interface not found
  fail:
    msg: "No public_interface found {{ ansible_host }}"
  when: public_interface is not defined

# Start configuration.

- name: Remove FirewallD
  ansible.builtin.package:
    name:
      - firewalld
    state: absent

- name: Install UFW
  ansible.builtin.package:
    name:
      - ufw
    state: latest
#    update_cache: yes

- name: Set logging
  community.general.ufw:
    logging: 'on'

- name: Reset UFW to defaults
  community.general.ufw:
    state: reset

# Here we allow all outgoing, but that should be restricted.
- name: Set UFW default policies
  community.general.ufw:
    default: "{{ item.default }}"
    direction: "{{ item.direction }}"
  loop:
    - { direction: incoming, default: deny }
    - { direction: outgoing, default: allow }
    - { direction: routed, default: deny }

- name: Allow SSH
  community.general.ufw:
    rule: allow
    port: "22"
    proto: tcp

# Inter-node communications
# https://docs.k3s.io/installation/requirements?_highlight=firewalld&os=debian#inbound-rules-for-k3s-nodes

- name: Allow etcd 2379 from other Servers
  community.general.ufw:
    rule: allow
    port: "2379"
    proto: tcp
    src: "{{ hostvars[item]['private_ip'] }}"
  loop: "{{ groups['k3s_servers'] }}"
  when: "'k3s_servers' in group_names"

- name: Allow etcd 2380 from other Servers
  community.general.ufw:
    rule: allow
    port: "2380"
    proto: tcp
    src: "{{ hostvars[item]['private_ip'] }}"
  loop: "{{ groups['k3s_servers'] }}"
  when: "'k3s_servers' in group_names"

- name: Allow Kubernetes API from Agents to Servers
  community.general.ufw:
    rule: allow
    port: "6443"
    proto: tcp
    src: "{{ hostvars[item]['private_ip'] }}"
  loop: "{{ groups['k3s_agents'] }}"
  when: "'k3s_servers' in group_names"

- name: Allow Flannel VXLan on all nodes
  community.general.ufw:
    rule: allow
    port: "8472"
    proto: udp
    src: "{{ hostvars[item]['private_ip'] }}"
  loop: "{{ groups['k3s_servers'] + groups['k3s_agents'] }}"
  
- name: Allow Kubelet metrics on all nodes
  community.general.ufw:
    rule: allow
    port: "10250"
    proto: tcp
    src: "{{ hostvars[item]['private_ip'] }}"
  loop: "{{ groups['k3s_servers'] + groups['k3s_agents'] }}"


# - name: Allow pod access to k3s API, outgoing
#   ansible.builtin.command:
#     cmd: ufw route allow in on cni0 out on {{ private_interface }} from {{ k8s.cluster_cidr }} to {{ hostvars[item]['private_ip'] }} port 6443 proto tcp
#   loop: "{{ groups['k3s_servers'] }}"
#   register: result
#   changed_when: "'Rule added' in result.stdout"


- name: Servers / Allow pods to talk to local Kubernetes API
  community.general.ufw:
    rule: allow
    direction: in
    interface: cni0
    to_port: "6443"
    proto: tcp
  when: "'k3s_servers' in group_names"

# Allow inter-pod communication
- name: Allow pod-to-pod
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    # Allow routing local pod traffic
    - "ufw route allow in on cni0 out on cni0"
    # Allow routing pod traffic to another node
    - "ufw route allow in on cni0 out on flannel.1"
    # Allow incoming pod traffic from another node
    - "ufw route allow in on flannel.1 out on cni0"
    # Allow transit traffic
    - "ufw route allow in on flannel.1 out on flannel.1"
  register: result
  changed_when: "'Rule added' in result.stdout"


# Allow pods access to Internet
- name: Allow pod forwarding to eth0
  ansible.builtin.command:
    cmd: ufw route allow in on cni0 out on eth0 from {{ k8s.cluster_cidr }}
  register: result
  changed_when: "'Rule added' in result.stdout"

# Add masquerading rules to UFW's before.rules
- name: Add masquerading rules to UFW
  ansible.builtin.blockinfile:
    path: /etc/ufw/before.rules
    marker: "# {mark} ANSIBLE MANAGED - Pod masquerading"
    insertbefore: "# Don't delete these required lines"
    block: |
      # Allow pod traffic masquerading on eth0 and eth1
      *nat
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -s {{ k8s.cluster_cidr }} -o eth0 -j MASQUERADE
      COMMIT
  notify: UFW Restart

- name: Enable UFW
  community.general.ufw:
    state: enabled