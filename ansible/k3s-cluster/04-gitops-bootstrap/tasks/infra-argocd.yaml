- name: Check if argocd chart is already installed
  kubernetes.core.helm_info:
    name: argocd
    release_namespace: infra-hcloud
    binary_path: /snap/bin/helm
  register: helm_chart_info
  failed_when: false  # Don't fail if chart is not found

- name: add argo repository
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm
    binary_path: /snap/bin/helm
  when: helm_chart_info.status is not defined

- name: checkout gitops-public repo
  ansible.builtin.git:
    repo: '{{ gitops.public_repo }}'
    dest: /tmp/gitops-public
    update: yes
  when: helm_chart_info.status is not defined

- name: deploy argocd
  kubernetes.core.helm:
    name: infra-argocd
    chart_ref: argo/argo-cd
    chart_version: v8.5.7
    release_namespace: infra-argocd
    create_namespace: true
    values_files:
      - "/tmp/gitops-public/{{ gitops.argocd_values }}"
    update_repo_cache: true
  when: helm_chart_info.status is not defined

- name: Apply kustomize manifests from server
  shell: kubectl apply -k {{ kustomize_dir }}
  register: kubectl_output
  changed_when: "'configured' in kubectl_output.stdout or 'created' in kubectl_output.stdout"
  vars:
    kustomize_dir: "/tmp/gitops-public/{{ k8s.cluster_name_short }}/infra/argocd"
  when: helm_chart_info.status is not defined

- name: Apply argocd-apps-public manifest
  shell: kubectl apply -f {{ manifest }}
  register: kubectl_output
  changed_when: "'configured' in kubectl_output.stdout or 'created' in kubectl_output.stdout"
  vars:
    manifest: "/tmp/gitops-public/{{ k8s.cluster_name_short }}/argocd-apps/argocd-apps-public.yaml"
  when: helm_chart_info.status is not defined

- name: Add ArgoCD repository secrets
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}-repo"
        namespace: infra-argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: "{{ item.type | b64encode }}"
        url: "{{ item.url | b64encode }}"
        sshPrivateKey: "{{ item.sshPrivateKey | b64encode }}"
  loop: "{{ gitops.repositories }}"
  no_log: true